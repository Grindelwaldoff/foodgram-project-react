[
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_list_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_list_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Favorites",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Tags",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Ingredients",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Favorites",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Subscriptions",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "IngredientsToRecipe",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Basket",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Tags",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Ingredients",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Favorites",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Subscriptions",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Basket",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Tags",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Ingredients",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Basket",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Favorites",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Subscriptions",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "IngredientsToRecipe",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "pagination",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Base64ImageField",
        "importPath": "drf_extra_fields.fields",
        "description": "drf_extra_fields.fields",
        "isExtraImport": true,
        "detail": "drf_extra_fields.fields",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "djoser.serializers",
        "description": "djoser.serializers",
        "isExtraImport": true,
        "detail": "djoser.serializers",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "SimpleRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "FavoriteViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "FollowViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "IgredientViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "RecipeViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "SubViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "TagViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "BasketViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pdfkit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdfkit",
        "description": "pdfkit",
        "detail": "pdfkit",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "RecipeFilter",
        "importPath": "api.filters",
        "description": "api.filters",
        "isExtraImport": true,
        "detail": "api.filters",
        "documentation": {}
    },
    {
        "label": "IngredientFilter",
        "importPath": "api.filters",
        "description": "api.filters",
        "isExtraImport": true,
        "detail": "api.filters",
        "documentation": {}
    },
    {
        "label": "BasketSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "FavoriteSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionsSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "colorfield.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorfield.fields",
        "description": "colorfield.fields",
        "detail": "colorfield.fields",
        "documentation": {}
    },
    {
        "label": "ColorField",
        "importPath": "colorfield.fields",
        "description": "colorfield.fields",
        "isExtraImport": true,
        "detail": "colorfield.fields",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.db.models.expressions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.expressions",
        "description": "django.db.models.expressions",
        "detail": "django.db.models.expressions",
        "documentation": {}
    },
    {
        "label": "django.db.models.fields.related",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.fields.related",
        "description": "django.db.models.fields.related",
        "detail": "django.db.models.fields.related",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ReworkedUser",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "validate_username",
        "importPath": "users.validators",
        "description": "users.validators",
        "isExtraImport": true,
        "detail": "users.validators",
        "documentation": {}
    },
    {
        "label": "validate_username",
        "importPath": "users.validators",
        "description": "users.validators",
        "isExtraImport": true,
        "detail": "users.validators",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "UnicodeUsernameValidator",
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "get_version",
        "importPath": "django.utils.version",
        "description": "django.utils.version",
        "isExtraImport": true,
        "detail": "django.utils.version",
        "documentation": {}
    },
    {
        "label": "HTTPStatus",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "HTTPStatus",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "HTTPStatus",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "# check_pagination",
        "importPath": "tests.utils",
        "description": "tests.utils",
        "isExtraImport": true,
        "detail": "tests.utils",
        "documentation": {}
    },
    {
        "label": "invalid_data_for_set_password",
        "importPath": "tests.utils",
        "description": "tests.utils",
        "isExtraImport": true,
        "detail": "tests.utils",
        "documentation": {}
    },
    {
        "label": "invalid_data_for_user_fields",
        "importPath": "tests.utils",
        "description": "tests.utils",
        "isExtraImport": true,
        "detail": "tests.utils",
        "documentation": {}
    },
    {
        "label": "# invalid_data_for_user_creation",
        "importPath": "tests.utils",
        "description": "tests.utils",
        "isExtraImport": true,
        "detail": "tests.utils",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "PSKeyword",
        "importPath": "pdfminer.psparser",
        "description": "pdfminer.psparser",
        "isExtraImport": true,
        "detail": "pdfminer.psparser",
        "documentation": {}
    },
    {
        "label": "PSLiteral",
        "importPath": "pdfminer.psparser",
        "description": "pdfminer.psparser",
        "isExtraImport": true,
        "detail": "pdfminer.psparser",
        "documentation": {}
    },
    {
        "label": "LIT",
        "importPath": "pdfminer.psparser",
        "description": "pdfminer.psparser",
        "isExtraImport": true,
        "detail": "pdfminer.psparser",
        "documentation": {}
    },
    {
        "label": "PDFParser",
        "importPath": "pdfminer.pdfparser",
        "description": "pdfminer.pdfparser",
        "isExtraImport": true,
        "detail": "pdfminer.pdfparser",
        "documentation": {}
    },
    {
        "label": "PDFParser",
        "importPath": "pdfminer.pdfparser",
        "description": "pdfminer.pdfparser",
        "isExtraImport": true,
        "detail": "pdfminer.pdfparser",
        "documentation": {}
    },
    {
        "label": "PDFDocument",
        "importPath": "pdfminer.pdfdocument",
        "description": "pdfminer.pdfdocument",
        "isExtraImport": true,
        "detail": "pdfminer.pdfdocument",
        "documentation": {}
    },
    {
        "label": "PDFNoOutlines",
        "importPath": "pdfminer.pdfdocument",
        "description": "pdfminer.pdfdocument",
        "isExtraImport": true,
        "detail": "pdfminer.pdfdocument",
        "documentation": {}
    },
    {
        "label": "PDFDocument",
        "importPath": "pdfminer.pdfdocument",
        "description": "pdfminer.pdfdocument",
        "isExtraImport": true,
        "detail": "pdfminer.pdfdocument",
        "documentation": {}
    },
    {
        "label": "PDFObjectNotFound",
        "importPath": "pdfminer.pdftypes",
        "description": "pdfminer.pdftypes",
        "isExtraImport": true,
        "detail": "pdfminer.pdftypes",
        "documentation": {}
    },
    {
        "label": "PDFValueError",
        "importPath": "pdfminer.pdftypes",
        "description": "pdfminer.pdftypes",
        "isExtraImport": true,
        "detail": "pdfminer.pdftypes",
        "documentation": {}
    },
    {
        "label": "PDFStream",
        "importPath": "pdfminer.pdftypes",
        "description": "pdfminer.pdftypes",
        "isExtraImport": true,
        "detail": "pdfminer.pdftypes",
        "documentation": {}
    },
    {
        "label": "PDFObjRef",
        "importPath": "pdfminer.pdftypes",
        "description": "pdfminer.pdftypes",
        "isExtraImport": true,
        "detail": "pdfminer.pdftypes",
        "documentation": {}
    },
    {
        "label": "resolve1",
        "importPath": "pdfminer.pdftypes",
        "description": "pdfminer.pdftypes",
        "isExtraImport": true,
        "detail": "pdfminer.pdftypes",
        "documentation": {}
    },
    {
        "label": "stream_value",
        "importPath": "pdfminer.pdftypes",
        "description": "pdfminer.pdftypes",
        "isExtraImport": true,
        "detail": "pdfminer.pdftypes",
        "documentation": {}
    },
    {
        "label": "PDFPage",
        "importPath": "pdfminer.pdfpage",
        "description": "pdfminer.pdfpage",
        "isExtraImport": true,
        "detail": "pdfminer.pdfpage",
        "documentation": {}
    },
    {
        "label": "PDFPage",
        "importPath": "pdfminer.pdfpage",
        "description": "pdfminer.pdfpage",
        "isExtraImport": true,
        "detail": "pdfminer.pdfpage",
        "documentation": {}
    },
    {
        "label": "isnumber",
        "importPath": "pdfminer.utils",
        "description": "pdfminer.utils",
        "isExtraImport": true,
        "detail": "pdfminer.utils",
        "documentation": {}
    },
    {
        "label": "q",
        "importPath": "pdfminer.utils",
        "description": "pdfminer.utils",
        "isExtraImport": true,
        "detail": "pdfminer.utils",
        "documentation": {}
    },
    {
        "label": "PDFResourceManager",
        "importPath": "pdfminer.pdfinterp",
        "description": "pdfminer.pdfinterp",
        "isExtraImport": true,
        "detail": "pdfminer.pdfinterp",
        "documentation": {}
    },
    {
        "label": "PDFPageInterpreter",
        "importPath": "pdfminer.pdfinterp",
        "description": "pdfminer.pdfinterp",
        "isExtraImport": true,
        "detail": "pdfminer.pdfinterp",
        "documentation": {}
    },
    {
        "label": "PDFDevice",
        "importPath": "pdfminer.pdfdevice",
        "description": "pdfminer.pdfdevice",
        "isExtraImport": true,
        "detail": "pdfminer.pdfdevice",
        "documentation": {}
    },
    {
        "label": "TagExtractor",
        "importPath": "pdfminer.pdfdevice",
        "description": "pdfminer.pdfdevice",
        "isExtraImport": true,
        "detail": "pdfminer.pdfdevice",
        "documentation": {}
    },
    {
        "label": "XMLConverter",
        "importPath": "pdfminer.converter",
        "description": "pdfminer.converter",
        "isExtraImport": true,
        "detail": "pdfminer.converter",
        "documentation": {}
    },
    {
        "label": "HTMLConverter",
        "importPath": "pdfminer.converter",
        "description": "pdfminer.converter",
        "isExtraImport": true,
        "detail": "pdfminer.converter",
        "documentation": {}
    },
    {
        "label": "TextConverter",
        "importPath": "pdfminer.converter",
        "description": "pdfminer.converter",
        "isExtraImport": true,
        "detail": "pdfminer.converter",
        "documentation": {}
    },
    {
        "label": "CMapDB",
        "importPath": "pdfminer.cmapdb",
        "description": "pdfminer.cmapdb",
        "isExtraImport": true,
        "detail": "pdfminer.cmapdb",
        "documentation": {}
    },
    {
        "label": "LAParams",
        "importPath": "pdfminer.layout",
        "description": "pdfminer.layout",
        "isExtraImport": true,
        "detail": "pdfminer.layout",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "pdfminer.image",
        "description": "pdfminer.image",
        "isExtraImport": true,
        "detail": "pdfminer.image",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.apps",
        "description": "backend.foodgram_back.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "backend.foodgram_back.api.apps",
        "documentation": {}
    },
    {
        "label": "IngredientFilter",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.filters",
        "description": "backend.foodgram_back.api.filters",
        "peekOfCode": "class IngredientFilter(SearchFilter):\n    search_param = 'name'\nclass RecipeFilter(filter.FilterSet):\n    tags = filter.AllValuesMultipleFilter(field_name='tags__slug')\n    author = filter.AllValuesFilter(field_name='author')\n    is_favorited = filter.BooleanFilter(\n        method='is_favorited_filter'\n    )\n    is_in_shopping_cart = filter.BooleanFilter(\n        method='cart_filter'",
        "detail": "backend.foodgram_back.api.filters",
        "documentation": {}
    },
    {
        "label": "RecipeFilter",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.filters",
        "description": "backend.foodgram_back.api.filters",
        "peekOfCode": "class RecipeFilter(filter.FilterSet):\n    tags = filter.AllValuesMultipleFilter(field_name='tags__slug')\n    author = filter.AllValuesFilter(field_name='author')\n    is_favorited = filter.BooleanFilter(\n        method='is_favorited_filter'\n    )\n    is_in_shopping_cart = filter.BooleanFilter(\n        method='cart_filter'\n    )\n    class Meta:",
        "detail": "backend.foodgram_back.api.filters",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "backend.foodgram_back.api.filters",
        "description": "backend.foodgram_back.api.filters",
        "peekOfCode": "User = get_user_model()\nclass IngredientFilter(SearchFilter):\n    search_param = 'name'\nclass RecipeFilter(filter.FilterSet):\n    tags = filter.AllValuesMultipleFilter(field_name='tags__slug')\n    author = filter.AllValuesFilter(field_name='author')\n    is_favorited = filter.BooleanFilter(\n        method='is_favorited_filter'\n    )\n    is_in_shopping_cart = filter.BooleanFilter(",
        "detail": "backend.foodgram_back.api.filters",
        "documentation": {}
    },
    {
        "label": "LimitPageSizePagination",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.pagination",
        "description": "backend.foodgram_back.api.pagination",
        "peekOfCode": "class LimitPageSizePagination(PageNumberPagination):\n    page_size_query_param = 'limit'",
        "detail": "backend.foodgram_back.api.pagination",
        "documentation": {}
    },
    {
        "label": "IngredientToRecipeSerializer",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class IngredientToRecipeSerializer(serializers.ModelSerializer):\n    id = serializers.IntegerField(source='ingredient_id')\n    class Meta:\n        model = IngredientsToRecipe\n        fields = ('amount', 'id')\n    def to_representation(self, instance):\n        representation = super().to_representation(instance)\n        representation.update({\n            'name': instance.ingredient.name,\n            'measurement_unit': instance.ingredient.measurement_unit",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "FavoriteSerializer",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class FavoriteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Favorites\n        fields = ('id',)\n    def to_representation(self, instance):\n        representation = super().to_representation(instance)\n        representation.update({\n            'name': instance.recipe.name,\n            'image': self.context.get('request').build_absolute_uri(instance.recipe.img.url),\n            'cooking_time': instance.recipe.time_to_cook",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class IngredientSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Ingredients\n        fields = (\n            'id',\n            'name',\n            'measurement_unit'\n        )\nclass SubRecipeSerializer(serializers.ModelSerializer):\n    cooking_time = serializers.CharField(source='time_to_cook')",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "SubRecipeSerializer",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class SubRecipeSerializer(serializers.ModelSerializer):\n    cooking_time = serializers.CharField(source='time_to_cook')\n    image = serializers.CharField(source='img')\n    class Meta:\n        model = Recipe\n        fields = (\n            'id',\n            'name', 'image',\n            'cooking_time'\n        )",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializerWithAdditionalFields",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class UserSerializerWithAdditionalFields(\n    serializers.HyperlinkedModelSerializer\n):\n    email = serializers.EmailField()\n    class Meta(UserSerializer.Meta):\n        fields = (\n            'id', 'email',\n            'username', 'first_name',\n            'last_name', 'password',\n        )",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionsSerializer",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class SubscriptionsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Subscriptions\n        fields = ('author', 'sub')\n        read_only_fields = fields\n    def to_representation(self, instance):\n        user_data = UserSerializerWithAdditionalFields(\n            instance=instance.author, context={\n                'request': self.context['request'],\n                'check_sub_tag': None",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class TagSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tags\n        fields = (\n            'id', 'name',\n            'color',\n            'slug'\n        )\n        read_only_fields = fields\nclass IngredientField(serializers.Field):",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientField",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class IngredientField(serializers.Field):\n    def to_representation(self, value):\n        return IngredientToRecipeSerializer(value, many=True).data\nclass RecipeSerializer(serializers.ModelSerializer):\n    cooking_time = serializers.IntegerField(source='time_to_cook')\n    image = Base64ImageField(source='img')\n    text = serializers.CharField(source='description')\n    ingredients = IngredientToRecipeSerializer(\n        many=True, required=False\n    )",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeSerializer",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class RecipeSerializer(serializers.ModelSerializer):\n    cooking_time = serializers.IntegerField(source='time_to_cook')\n    image = Base64ImageField(source='img')\n    text = serializers.CharField(source='description')\n    ingredients = IngredientToRecipeSerializer(\n        many=True, required=False\n    )\n    tags = serializers.PrimaryKeyRelatedField(\n        many=True,\n        queryset=Tags.objects.all()",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "BasketSerializer",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "class BasketSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Basket\n        fields = (\n            'id',\n        )\n    def to_representation(self, instance):\n        repr = super().to_representation(instance)\n        repr.update({\n            'name': instance.recipe.name,",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "backend.foodgram_back.api.serializers",
        "description": "backend.foodgram_back.api.serializers",
        "peekOfCode": "User = get_user_model()\nclass IngredientToRecipeSerializer(serializers.ModelSerializer):\n    id = serializers.IntegerField(source='ingredient_id')\n    class Meta:\n        model = IngredientsToRecipe\n        fields = ('amount', 'id')\n    def to_representation(self, instance):\n        representation = super().to_representation(instance)\n        representation.update({\n            'name': instance.ingredient.name,",
        "detail": "backend.foodgram_back.api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.foodgram_back.api.urls",
        "description": "backend.foodgram_back.api.urls",
        "peekOfCode": "router = SimpleRouter()\nrouter.register('ingredients', IgredientViewSet, basename='ing')\nrouter.register('tags', TagViewSet, basename='tags')\nrouter.register('recipes', RecipeViewSet, basename='recipes')\nrouter.register(\n    r'users/(?P<user_id>\\d+)/subscribe',\n    FollowViewSet, basename='follow'\n)\nrouter.register(\n    r'recipes/(?P<recipe_id>\\d+)/favorite',",
        "detail": "backend.foodgram_back.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.foodgram_back.api.urls",
        "description": "backend.foodgram_back.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('auth/', include('djoser.urls.authtoken')),\n    path(\n        'recipes/<int:recipe_id>/shopping_cart/',\n        BasketViewSet.as_view({\n            'post': 'create',\n            'delete': 'delete'\n        })\n    ),\n    path(",
        "detail": "backend.foodgram_back.api.urls",
        "documentation": {}
    },
    {
        "label": "IgredientViewSet",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.views",
        "description": "backend.foodgram_back.api.views",
        "peekOfCode": "class IgredientViewSet(ModelViewSet):\n    queryset = Ingredients.objects.all()\n    serializer_class = IngredientSerializer\n    pagination_class = None\n    permission_classes = (permissions.AllowAny,)\n    http_method_names = ['get']\n    filter_backends = (DjangoFilterBackend, IngredientFilter)\n    search_fields = ('^name',)\nclass FavoriteViewSet(ModelViewSet):\n    queryset = Favorites.objects.all()",
        "detail": "backend.foodgram_back.api.views",
        "documentation": {}
    },
    {
        "label": "FavoriteViewSet",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.views",
        "description": "backend.foodgram_back.api.views",
        "peekOfCode": "class FavoriteViewSet(ModelViewSet):\n    queryset = Favorites.objects.all()\n    serializer_class = FavoriteSerializer\n    pagination_class = None\n    http_method_names = ['post', 'delete']\n    @action(detail=False, methods=['DELETE'])\n    def delete(self, request, *args, **kwargs):\n        Favorites.objects.get(\n            recipe=Recipe.objects.filter(\n                id=self.kwargs.get('recipe_id')",
        "detail": "backend.foodgram_back.api.views",
        "documentation": {}
    },
    {
        "label": "SubViewSet",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.views",
        "description": "backend.foodgram_back.api.views",
        "peekOfCode": "class SubViewSet(ModelViewSet):\n    serializer_class = SubscriptionsSerializer\n    http_method_names = ['get', 'post', 'delete']\n    def get_queryset(self):\n        return Subscriptions.objects.filter(sub=self.request.user)\nclass FollowViewSet(ModelViewSet):\n    queryset = Subscriptions.objects.all()\n    serializer_class = SubscriptionsSerializer\n    pagination_class = pagination.LimitOffsetPagination\n    http_method_names = ['post', 'delete', 'get']",
        "detail": "backend.foodgram_back.api.views",
        "documentation": {}
    },
    {
        "label": "FollowViewSet",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.views",
        "description": "backend.foodgram_back.api.views",
        "peekOfCode": "class FollowViewSet(ModelViewSet):\n    queryset = Subscriptions.objects.all()\n    serializer_class = SubscriptionsSerializer\n    pagination_class = pagination.LimitOffsetPagination\n    http_method_names = ['post', 'delete', 'get']\n    def get_queryset(self):\n        return Subscriptions.objects.filter(\n            sub=self.request.user\n        )\n    def perform_create(self, serializer):",
        "detail": "backend.foodgram_back.api.views",
        "documentation": {}
    },
    {
        "label": "TagViewSet",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.views",
        "description": "backend.foodgram_back.api.views",
        "peekOfCode": "class TagViewSet(ModelViewSet):\n    queryset = Tags.objects.all()\n    serializer_class = TagSerializer\n    pagination_class = None\n    permission_classes = (permissions.AllowAny,)\n    http_method_names = ['get']\nclass RecipeViewSet(ModelViewSet):\n    queryset = Recipe.objects.all()\n    serializer_class = RecipeSerializer\n    http_method_names = ['get', 'post', 'patch', 'delete']",
        "detail": "backend.foodgram_back.api.views",
        "documentation": {}
    },
    {
        "label": "RecipeViewSet",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.views",
        "description": "backend.foodgram_back.api.views",
        "peekOfCode": "class RecipeViewSet(ModelViewSet):\n    queryset = Recipe.objects.all()\n    serializer_class = RecipeSerializer\n    http_method_names = ['get', 'post', 'patch', 'delete']\n    permission_classes = (permissions.AllowAny,)\n    filter_backends = (DjangoFilterBackend,)\n    filterset_class = RecipeFilter\n    def perform_create(self, serializer):\n        serializer.save(\n            author=self.request.user",
        "detail": "backend.foodgram_back.api.views",
        "documentation": {}
    },
    {
        "label": "BasketViewSet",
        "kind": 6,
        "importPath": "backend.foodgram_back.api.views",
        "description": "backend.foodgram_back.api.views",
        "peekOfCode": "class BasketViewSet(ModelViewSet):\n    queryset = Basket.objects.all()\n    serializer_class = BasketSerializer\n    permission_classes = ()\n    def download(self, request):\n        items_in_basket = get_list_or_404(Basket, user=User.objects.get(id=2))\n        shopping_cart = {}\n        for item in items_in_basket:\n            ing_list = item.recipe.ingredients.all()\n            for ing in ing_list:",
        "detail": "backend.foodgram_back.api.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "backend.foodgram_back.api.views",
        "description": "backend.foodgram_back.api.views",
        "peekOfCode": "User = get_user_model()\nclass IgredientViewSet(ModelViewSet):\n    queryset = Ingredients.objects.all()\n    serializer_class = IngredientSerializer\n    pagination_class = None\n    permission_classes = (permissions.AllowAny,)\n    http_method_names = ['get']\n    filter_backends = (DjangoFilterBackend, IngredientFilter)\n    search_fields = ('^name',)\nclass FavoriteViewSet(ModelViewSet):",
        "detail": "backend.foodgram_back.api.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.asgi",
        "description": "backend.foodgram_back.foodgram_back.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.foodgram_back.foodgram_back.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG')\nALLOWED_HOSTS = [os.getenv('ALLOWED_HOSTS')]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG')\nALLOWED_HOSTS = [os.getenv('ALLOWED_HOSTS')]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG')\nALLOWED_HOSTS = [os.getenv('ALLOWED_HOSTS')]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "ALLOWED_HOSTS = [os.getenv('ALLOWED_HOSTS')]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'api.apps.ApiConfig',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    'http://localhost:3000',\n]\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_URLS_REGEX = r'^/api/.*$'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True\nCORS_URLS_REGEX = r'^/api/.*$'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "CORS_URLS_REGEX",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "CORS_URLS_REGEX = r'^/api/.*$'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "ROOT_URLCONF = 'foodgram_back.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates/'),],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates/'),],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "WSGI_APPLICATION = 'foodgram_back.wsgi.application'\nAUTH_USER_MODEL = 'users.ReworkedUser'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME', default='postgres'),\n        'USER': os.getenv('POSTGRES_USER', default='postgres'),\n        'PASSWORD': os.getenv('POSTGRES_PASSWORD', default='postgres'),",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.ReworkedUser'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME', default='postgres'),\n        'USER': os.getenv('POSTGRES_USER', default='postgres'),\n        'PASSWORD': os.getenv('POSTGRES_PASSWORD', default='postgres'),\n        'HOST': os.getenv('DB_HOST', default='db'),",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME', default='postgres'),\n        'USER': os.getenv('POSTGRES_USER', default='postgres'),\n        'PASSWORD': os.getenv('POSTGRES_PASSWORD', default='postgres'),\n        'HOST': os.getenv('DB_HOST', default='db'),\n        'PORT': os.getenv('DB_PORT', default=5432)\n    }\n}",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "SECURE_SSL_REDIRECT = False\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n#     }\n# }\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/admin/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static/admin')\nMEDIA_URL = '/media/'",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/admin/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static/admin')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/admin/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static/admin')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nREST_FRAMEWORK = {",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/admin/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static/admin')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/admin/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static/admin')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "STATIC_URL = '/static/admin/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static/admin')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],\n    'DEFAULT_PAGINATION_CLASS': 'api.pagination.LimitPageSizePagination',",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'static/admin')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],\n    'DEFAULT_PAGINATION_CLASS': 'api.pagination.LimitPageSizePagination',\n    'PAGE_SIZE': 10,",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],\n    'DEFAULT_PAGINATION_CLASS': 'api.pagination.LimitPageSizePagination',\n    'PAGE_SIZE': 10,\n}",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],\n    'DEFAULT_PAGINATION_CLASS': 'api.pagination.LimitPageSizePagination',\n    'PAGE_SIZE': 10,\n}\nDJOSER = {",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],\n    'DEFAULT_PAGINATION_CLASS': 'api.pagination.LimitPageSizePagination',\n    'PAGE_SIZE': 10,\n}\nDJOSER = {\n    'SERIALIZERS': {",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "DJOSER",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "DJOSER = {\n    'SERIALIZERS': {\n        'user': 'api.serializers.UserSerializerWithAdditionalFields',\n        'user_create': 'api.serializers.UserSerializerWithAdditionalFields',\n        'current_user': 'api.serializers.UserSerializerWithAdditionalFields',\n    },\n    'HIDE_USERS': False,\n    'LOGIN_FIELD': 'email',\n    'PERMISSIONS': {\n        'activation': ['rest_framework.permissions.IsAdminUser'],",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nHTML_TO_PDF_ROUTE = '/usr/bin/wkhtmltopdf'\nNAME_MAX_LENGTH = 150\nDESC_MAX_LENGTH = 5000\nMEASURE_MAX_LENGTH = 50\nEMAIL_MAX_LENGTH = 254",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "HTML_TO_PDF_ROUTE",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "HTML_TO_PDF_ROUTE = '/usr/bin/wkhtmltopdf'\nNAME_MAX_LENGTH = 150\nDESC_MAX_LENGTH = 5000\nMEASURE_MAX_LENGTH = 50\nEMAIL_MAX_LENGTH = 254",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "NAME_MAX_LENGTH",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "NAME_MAX_LENGTH = 150\nDESC_MAX_LENGTH = 5000\nMEASURE_MAX_LENGTH = 50\nEMAIL_MAX_LENGTH = 254",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "DESC_MAX_LENGTH",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "DESC_MAX_LENGTH = 5000\nMEASURE_MAX_LENGTH = 50\nEMAIL_MAX_LENGTH = 254",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "MEASURE_MAX_LENGTH",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "MEASURE_MAX_LENGTH = 50\nEMAIL_MAX_LENGTH = 254",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_MAX_LENGTH",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.settings",
        "description": "backend.foodgram_back.foodgram_back.settings",
        "peekOfCode": "EMAIL_MAX_LENGTH = 254",
        "detail": "backend.foodgram_back.foodgram_back.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.urls",
        "description": "backend.foodgram_back.foodgram_back.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n    path('api/', include('djoser.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "backend.foodgram_back.foodgram_back.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.foodgram_back.foodgram_back.wsgi",
        "description": "backend.foodgram_back.foodgram_back.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.foodgram_back.foodgram_back.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.migrations.0001_initial",
        "description": "backend.foodgram_back.main.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Ingredients',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "backend.foodgram_back.main.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.migrations.0002_alter_ingredientstorecipe_amount",
        "description": "backend.foodgram_back.main.migrations.0002_alter_ingredientstorecipe_amount",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='ingredientstorecipe',\n            name='amount',\n            field=models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(30000), django.core.validators.MinValueValidator(10)]),\n        ),",
        "detail": "backend.foodgram_back.main.migrations.0002_alter_ingredientstorecipe_amount",
        "documentation": {}
    },
    {
        "label": "IngsToRecipeTab",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.admin",
        "description": "backend.foodgram_back.main.admin",
        "peekOfCode": "class IngsToRecipeTab(admin.TabularInline):\n    model = IngredientsToRecipe\n    min_num = 1\nclass FieldsChecker(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['first_name'].required = True\n        self.fields['last_name'].required = True\n@admin.register(ReworkedUser)\nclass UserAdmin(admin.ModelAdmin):",
        "detail": "backend.foodgram_back.main.admin",
        "documentation": {}
    },
    {
        "label": "FieldsChecker",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.admin",
        "description": "backend.foodgram_back.main.admin",
        "peekOfCode": "class FieldsChecker(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['first_name'].required = True\n        self.fields['last_name'].required = True\n@admin.register(ReworkedUser)\nclass UserAdmin(admin.ModelAdmin):\n    list_filter = ('email', 'username')\n    form = FieldsChecker\n@admin.register(Recipe)",
        "detail": "backend.foodgram_back.main.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.admin",
        "description": "backend.foodgram_back.main.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    list_filter = ('email', 'username')\n    form = FieldsChecker\n@admin.register(Recipe)\nclass RecipeAdmin(admin.ModelAdmin):\n    list_display = ['author', 'name']\n    list_filter = ('author', 'name', 'tags')\n    readonly_fields = ('favorite_count',)\n    inlines = [IngsToRecipeTab]\n    def favorite_count(self, obj):",
        "detail": "backend.foodgram_back.main.admin",
        "documentation": {}
    },
    {
        "label": "RecipeAdmin",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.admin",
        "description": "backend.foodgram_back.main.admin",
        "peekOfCode": "class RecipeAdmin(admin.ModelAdmin):\n    list_display = ['author', 'name']\n    list_filter = ('author', 'name', 'tags')\n    readonly_fields = ('favorite_count',)\n    inlines = [IngsToRecipeTab]\n    def favorite_count(self, obj):\n        return obj.favorites.count()\n@admin.register(Ingredients)\nclass IngredientsAdmin(admin.ModelAdmin):\n    list_filter = ('name',)",
        "detail": "backend.foodgram_back.main.admin",
        "documentation": {}
    },
    {
        "label": "IngredientsAdmin",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.admin",
        "description": "backend.foodgram_back.main.admin",
        "peekOfCode": "class IngredientsAdmin(admin.ModelAdmin):\n    list_filter = ('name',)\n    list_display = ('name', 'measurement_unit')\n# @admin.register(IngredientsToRecipe)\n# class IngredientsRecipeAdmin(admin.ModelAdmin):\n#     list_display = ['recipe', 'ingredient', 'amount']\nadmin.site.register(Tags)\nadmin.site.register(Favorites)\nadmin.site.register(Basket)\nadmin.site.register(Subscriptions)",
        "detail": "backend.foodgram_back.main.admin",
        "documentation": {}
    },
    {
        "label": "MainConfig",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.apps",
        "description": "backend.foodgram_back.main.apps",
        "peekOfCode": "class MainConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'main'",
        "detail": "backend.foodgram_back.main.apps",
        "documentation": {}
    },
    {
        "label": "Tags",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.models",
        "description": "backend.foodgram_back.main.models",
        "peekOfCode": "class Tags(models.Model):\n    \"\"\"Класс модели тэгов.\"\"\"\n    name = models.CharField(\n        max_length=settings.NAME_MAX_LENGTH,\n        unique=True\n    )\n    color = ColorField()\n    slug = models.SlugField(\n        max_length=settings.NAME_MAX_LENGTH,\n        unique=True",
        "detail": "backend.foodgram_back.main.models",
        "documentation": {}
    },
    {
        "label": "Ingredients",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.models",
        "description": "backend.foodgram_back.main.models",
        "peekOfCode": "class Ingredients(models.Model):\n    \"\"\"Класс модели ингредиентов.\"\"\"\n    name = models.CharField(\n        max_length=settings.NAME_MAX_LENGTH,\n        unique=True,\n    )\n    measurement_unit = models.CharField(\n        max_length=settings.MEASURE_MAX_LENGTH,\n    )\n    class Meta:",
        "detail": "backend.foodgram_back.main.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.models",
        "description": "backend.foodgram_back.main.models",
        "peekOfCode": "class Recipe(models.Model):\n    \"\"\"Класс модели рецептов.\"\"\"\n    author = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='recipes',\n    )\n    name = models.CharField(\n        max_length=settings.NAME_MAX_LENGTH,\n        validators=[",
        "detail": "backend.foodgram_back.main.models",
        "documentation": {}
    },
    {
        "label": "IngredientsToRecipe",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.models",
        "description": "backend.foodgram_back.main.models",
        "peekOfCode": "class IngredientsToRecipe(models.Model):\n    \"\"\"Класс модели, описывающей кол-во ингредиентов для рецептов.\"\"\"\n    recipe = models.ForeignKey(\n        Recipe,\n        related_name='ingredients',\n        on_delete=models.CASCADE\n    )\n    ingredient = models.ForeignKey(\n        Ingredients,\n        on_delete=models.CASCADE,",
        "detail": "backend.foodgram_back.main.models",
        "documentation": {}
    },
    {
        "label": "Basket",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.models",
        "description": "backend.foodgram_back.main.models",
        "peekOfCode": "class Basket(models.Model):\n    recipe = models.ForeignKey(\n        Recipe, on_delete=models.CASCADE,\n        related_name='basket'\n    )\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='+'\n    )",
        "detail": "backend.foodgram_back.main.models",
        "documentation": {}
    },
    {
        "label": "Favorites",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.models",
        "description": "backend.foodgram_back.main.models",
        "peekOfCode": "class Favorites(models.Model):\n    recipe = models.ForeignKey(\n        Recipe,\n        related_name='favorites',\n        on_delete=models.CASCADE,\n    )\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='+',",
        "detail": "backend.foodgram_back.main.models",
        "documentation": {}
    },
    {
        "label": "Subscriptions",
        "kind": 6,
        "importPath": "backend.foodgram_back.main.models",
        "description": "backend.foodgram_back.main.models",
        "peekOfCode": "class Subscriptions(models.Model):\n    author = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='author'\n    )\n    sub = models.ForeignKey(\n        User,\n        on_delete=models.ForeignKey,\n        related_name='sub'",
        "detail": "backend.foodgram_back.main.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "backend.foodgram_back.main.models",
        "description": "backend.foodgram_back.main.models",
        "peekOfCode": "User = get_user_model()\nclass Tags(models.Model):\n    \"\"\"Класс модели тэгов.\"\"\"\n    name = models.CharField(\n        max_length=settings.NAME_MAX_LENGTH,\n        unique=True\n    )\n    color = ColorField()\n    slug = models.SlugField(\n        max_length=settings.NAME_MAX_LENGTH,",
        "detail": "backend.foodgram_back.main.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.foodgram_back.users.migrations.0001_initial",
        "description": "backend.foodgram_back.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ReworkedUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "backend.foodgram_back.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "backend.foodgram_back.users.apps",
        "description": "backend.foodgram_back.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "backend.foodgram_back.users.apps",
        "documentation": {}
    },
    {
        "label": "ReworkedUser",
        "kind": 6,
        "importPath": "backend.foodgram_back.users.models",
        "description": "backend.foodgram_back.users.models",
        "peekOfCode": "class ReworkedUser(AbstractUser):\n    \"\"\"Модель юзера с отредактированными полями.\"\"\"\n    email = models.EmailField(max_length=settings.EMAIL_MAX_LENGTH, unique=True)\n    username = models.CharField(\n        max_length=settings.NAME_MAX_LENGTH,\n        unique=True,\n        error_messages={\n            'unique': _(\"A user with that username already exists.\"),\n        },\n        validators=[",
        "detail": "backend.foodgram_back.users.models",
        "documentation": {}
    },
    {
        "label": "validate_username",
        "kind": 2,
        "importPath": "backend.foodgram_back.users.validators",
        "description": "backend.foodgram_back.users.validators",
        "peekOfCode": "def validate_username(value, field_name):\n    if any(char in value for char in '!@#$%^'):\n        raise ValidationError(\n            _(f'{field_name} cannot contain special characters'),\n            params={'value': value},\n        )",
        "detail": "backend.foodgram_back.users.validators",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.foodgram_back.manage",
        "description": "backend.foodgram_back.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'foodgram_back.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.foodgram_back.manage",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 2,
        "importPath": "backend.tests.fixtures.fixture_user",
        "description": "backend.tests.fixtures.fixture_user",
        "peekOfCode": "def admin(django_user_model):\n    return django_user_model.objects.create_superuser(\n        username='Superadmin',\n        email='testadmin@yamdb.fake',\n        password='1111',\n        first_name='Vse',\n        last_name='ryb'\n    )\n@pytest.fixture\ndef user(django_user_model):",
        "detail": "backend.tests.fixtures.fixture_user",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": "backend.tests.fixtures.fixture_user",
        "description": "backend.tests.fixtures.fixture_user",
        "peekOfCode": "def user(django_user_model):\n    return django_user_model.objects.create_user(\n        username='athUser',\n        email='testuser@yamdb.fake',\n        password=1111,\n        first_name='Vse',\n        last_name='ryb'\n    )\n@pytest.fixture\ndef token_user_admin(user_superuser):",
        "detail": "backend.tests.fixtures.fixture_user",
        "documentation": {}
    },
    {
        "label": "token_user_admin",
        "kind": 2,
        "importPath": "backend.tests.fixtures.fixture_user",
        "description": "backend.tests.fixtures.fixture_user",
        "peekOfCode": "def token_user_admin(user_superuser):\n    token = AccessToken.for_user(user_superuser)\n    return {\n        'access': str(token),\n    }\n@pytest.fixture\ndef user_admin_client(token_user_superuser):\n    client = APIClient()\n    client.credentials(\n        HTTP_AUTHORIZATION=f'Bearer {token_user_superuser[\"access\"]}'",
        "detail": "backend.tests.fixtures.fixture_user",
        "documentation": {}
    },
    {
        "label": "user_admin_client",
        "kind": 2,
        "importPath": "backend.tests.fixtures.fixture_user",
        "description": "backend.tests.fixtures.fixture_user",
        "peekOfCode": "def user_admin_client(token_user_superuser):\n    client = APIClient()\n    client.credentials(\n        HTTP_AUTHORIZATION=f'Bearer {token_user_superuser[\"access\"]}'\n    )\n    return client\n@pytest.fixture\ndef token_user(user):\n    token = AccessToken.for_user(user)\n    return {",
        "detail": "backend.tests.fixtures.fixture_user",
        "documentation": {}
    },
    {
        "label": "token_user",
        "kind": 2,
        "importPath": "backend.tests.fixtures.fixture_user",
        "description": "backend.tests.fixtures.fixture_user",
        "peekOfCode": "def token_user(user):\n    token = AccessToken.for_user(user)\n    return {\n        'access': str(token),\n    }\n@pytest.fixture\ndef user_client(token_user):\n    client = APIClient()\n    client.credentials(HTTP_AUTHORIZATION=f'Bearer {token_user[\"access\"]}')\n    return",
        "detail": "backend.tests.fixtures.fixture_user",
        "documentation": {}
    },
    {
        "label": "user_client",
        "kind": 2,
        "importPath": "backend.tests.fixtures.fixture_user",
        "description": "backend.tests.fixtures.fixture_user",
        "peekOfCode": "def user_client(token_user):\n    client = APIClient()\n    client.credentials(HTTP_AUTHORIZATION=f'Bearer {token_user[\"access\"]}')\n    return",
        "detail": "backend.tests.fixtures.fixture_user",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.append(BASE_DIR)\nroot_dir_content = os.listdir(BASE_DIR)\nPROJECT_DIR_NAME = 'foodgram_back'\nif (\n        PROJECT_DIR_NAME not in root_dir_content\n        or not os.path.isdir(os.path.join(BASE_DIR, PROJECT_DIR_NAME))\n):\n    assert False, (\n        f'В директории `{BASE_DIR}` не найдена папка c проектом '",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "root_dir_content",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "root_dir_content = os.listdir(BASE_DIR)\nPROJECT_DIR_NAME = 'foodgram_back'\nif (\n        PROJECT_DIR_NAME not in root_dir_content\n        or not os.path.isdir(os.path.join(BASE_DIR, PROJECT_DIR_NAME))\n):\n    assert False, (\n        f'В директории `{BASE_DIR}` не найдена папка c проектом '\n        f'`{PROJECT_DIR_NAME}`. Убедитесь, что у вас верная структура проекта.'\n    )",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "PROJECT_DIR_NAME",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "PROJECT_DIR_NAME = 'foodgram_back'\nif (\n        PROJECT_DIR_NAME not in root_dir_content\n        or not os.path.isdir(os.path.join(BASE_DIR, PROJECT_DIR_NAME))\n):\n    assert False, (\n        f'В директории `{BASE_DIR}` не найдена папка c проектом '\n        f'`{PROJECT_DIR_NAME}`. Убедитесь, что у вас верная структура проекта.'\n    )\nMANAGE_PATH = os.path.join(BASE_DIR, PROJECT_DIR_NAME)",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "MANAGE_PATH",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "MANAGE_PATH = os.path.join(BASE_DIR, PROJECT_DIR_NAME)\nproject_dir_content = os.listdir(MANAGE_PATH)\nFILENAME = 'manage.py'\nif FILENAME not in project_dir_content:\n    assert False, (\n        f'В директории `{MANAGE_PATH}` не найден файл `{FILENAME}`. '\n        f'Убедитесь, что у вас верная структура проекта.'\n    )\nassert get_version() < '4.0.0', 'Пожалуйста, используйте версию Django < 4.0.0'\npytest_plugins = [",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "project_dir_content",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "project_dir_content = os.listdir(MANAGE_PATH)\nFILENAME = 'manage.py'\nif FILENAME not in project_dir_content:\n    assert False, (\n        f'В директории `{MANAGE_PATH}` не найден файл `{FILENAME}`. '\n        f'Убедитесь, что у вас верная структура проекта.'\n    )\nassert get_version() < '4.0.0', 'Пожалуйста, используйте версию Django < 4.0.0'\npytest_plugins = [\n    'tests.fixtures.fixture_user'",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "FILENAME",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "FILENAME = 'manage.py'\nif FILENAME not in project_dir_content:\n    assert False, (\n        f'В директории `{MANAGE_PATH}` не найден файл `{FILENAME}`. '\n        f'Убедитесь, что у вас верная структура проекта.'\n    )\nassert get_version() < '4.0.0', 'Пожалуйста, используйте версию Django < 4.0.0'\npytest_plugins = [\n    'tests.fixtures.fixture_user'\n]",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest_plugins",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "pytest_plugins = [\n    'tests.fixtures.fixture_user'\n]",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "TestRecipe",
        "kind": 6,
        "importPath": "backend.tests.test_recipe",
        "description": "backend.tests.test_recipe",
        "peekOfCode": "class TestRecipe:\n    url_recipe = '/api/recipes/'\n    url_favorites = '/api/recipes/1/favorite/'\n    def test_recipe_add_with_valid_data(self, admin_client):\n        response = create_recipe(\n            client=admin_client,\n            ingredients=[{\n                'id': 1,\n                'amount': 12\n            }],",
        "detail": "backend.tests.test_recipe",
        "documentation": {}
    },
    {
        "label": "TestUserRegistarion",
        "kind": 6,
        "importPath": "backend.tests.test_users",
        "description": "backend.tests.test_users",
        "peekOfCode": "class TestUserRegistarion:\n    url_signup = \"/api/users/\"\n    url_token = \"/api/auth/token/login/\"\n    url_token_logout = \"/api/auth/token/logout/\"\n    url_set_password = \"/api/users/set_password/\"\n    def test_nodata_signup(self, client):\n        response = client.post(self.url_signup)\n        assert response.status_code != HTTPStatus.NOT_FOUND, (\n            f\"Эндпоинт `{self.url_signup}` не найден. Проверьте настройки \"\n            \"в *urls.py*.\"",
        "detail": "backend.tests.test_users",
        "documentation": {}
    },
    {
        "label": "TestUserFunc",
        "kind": 6,
        "importPath": "backend.tests.test_users",
        "description": "backend.tests.test_users",
        "peekOfCode": "class TestUserFunc:\n    url_me = '/api/users/me/'\n    url_profile = '/api/users/'\n    def test_base_urls_accessible(self, client):\n        response = client.get(self.url_me)\n        assert response.status_code != HTTPStatus.NOT_FOUND, (\n            f\"Эндпоинт `{self.url_me}` не найден. Проверьте настройки \"\n            \"в *urls.py*.\"\n        )\n        response = client.get(self.url_profile)",
        "detail": "backend.tests.test_users",
        "documentation": {}
    },
    {
        "label": "check_pagination",
        "kind": 2,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "def check_pagination(url, respons_data, expected_count, post_data=None):\n    expected_keys = ('count', 'next', 'previous', 'results')\n    for key in expected_keys:\n        assert key in respons_data, (\n            f'Проверьте, что для эндпоинта `{url}` настроена '\n            f'пагинация и ответ на GET-запрос содержит ключ {key}.'\n        )\n    assert respons_data['count'] == expected_count, (\n        f'Проверьте, что для эндпоинта `{url}` настроена '\n        f'пагинация. Сейчас ключ `count` содержит некорректное значение.'",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "check_permissions",
        "kind": 2,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "def check_permissions(client, url, data, user_role, objects,\n                      expected_status):\n    sufix = 'slug' if 'slug' in objects[0] else 'id'\n    response = client.post(url, data=data)\n    assert response.status_code == expected_status, (\n        f'Проверьте, что POST-запрос {user_role} к `{url}` возвращает ответ '\n        f'со статусом {expected_status}.'\n    )\n    response = client.patch(f'{url}{objects[0][sufix]}/', data=data)\n    assert response.status_code == expected_status, (",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "create_recipe",
        "kind": 2,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "def create_recipe(\n    client, ingredients: list, tags: list,\n    image: str, name: str,\n    text: str, cooking_time: int\n):\n    data = {\n        'tags': tags,\n        'image': image, 'name': name,\n        'text': text, 'cooking_time': cooking_time}\n    response = client.post(",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "add_recipe",
        "kind": 2,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "def add_recipe(client, recipe_id):\n    response = client.post(\n        f'/api/recipes/{recipe_id}/shopping_cart/',\n    )\n    assert response.status_code == HTTPStatus.CREATED, (\n        'Если POST-запрос авторизованного пользователя к '\n        '`/api/recipes/{recipe_id}/shopping_cart/` содержит '\n        'корректные данные - должен вернуться ответ со статусом 201.'\n    )\n    return response",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "add_recipe_to_favorites",
        "kind": 2,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "def add_recipe_to_favorites(client, id_1,):\n    response = client.post(f'/api/recipes/{id_1}/favorite/')\n    assert response.status_code == HTTPStatus.CREATED, (\n        'Если POST-запрос авторизованного пользователя к '\n        f'`/api/recipes/{id_1}/favorite/` '\n        'содержит корректные данные - должен вернуться ответ со статусом 201.',\n        response.json()\n    )\ndef subscribe_on_user(client, recepies_limit):\n    response = client.post(",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "subscribe_on_user",
        "kind": 2,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "def subscribe_on_user(client, recepies_limit):\n    response = client.post(\n        '/api/users/{id}/subscribe/',\n        data={'recepies_limit': recepies_limit}\n    )\n    assert response.status_code == HTTPStatus.CREATED, (\n        'Если POST-запрос авторизованного пользователя к '\n        '`/api/users/{id}/subscribe/` '\n        'содержит корректные данные - должен вернуться ответ со статусом 201.'\n    )",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "check_tag_fields_patterns",
        "kind": 5,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "check_tag_fields_patterns = (\n    (\n        {\n            'name': 'a' * 256 + 'simbols',\n            'color': '#49B64E',\n            'slug': 'longname'\n        },\n        ((\n            'Проверьте, что при обработке POST-запроса к `{url}` проверяется '\n            'длина поля `name`: название произведения не '",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "invalid_data_for_user_fields",
        "kind": 5,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "invalid_data_for_user_fields = [\n    (\n        {\n            'first_name': 'testname',\n            'second_name': 'testsurnmae',\n            'password': 1111,\n            'email': ('a' * 244) + '@yamdb.fake',\n            'username': 'valid-username'\n        },\n        ((",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "invalid_data_for_user_creation",
        "kind": 5,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "invalid_data_for_user_creation = (\n    invalid_data_for_user_fields.copy()\n)\ninvalid_data_for_set_password = (\n    (\n        {\n            'new_password': 123123,\n            'current_password': ''\n        },\n        ((",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "invalid_data_for_set_password",
        "kind": 5,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "invalid_data_for_set_password = (\n    (\n        {\n            'new_password': 123123,\n            'current_password': ''\n        },\n        ((\n            'Проверьте, что при обработке {request_method}-запроса к `{url}` '\n            'содержание поля `current_password` проверяется на наличие'\n        ),)",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "recipe_correct_data",
        "kind": 5,
        "importPath": "backend.tests.utils",
        "description": "backend.tests.utils",
        "peekOfCode": "recipe_correct_data = {\n    \"ingredients\": \n    [\n        {\n            \"id\": 1,\n            \"amount\": 10\n        }\n    ],\n    \"tags\": \n        [",
        "detail": "backend.tests.utils",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "def encode(data):\n    buf = StringIO()\n    for b in data:\n        if b < 32 or 127 <= b or b in ESCAPE:\n            buf.write(f'&#{b};')\n        else:\n            buf.write(chr(b))\n    return buf.getvalue()\n# dumpxml\ndef dumpxml(out, obj, mode=None):",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "dumpxml",
        "kind": 2,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "def dumpxml(out, obj, mode=None):\n    if obj is None:\n        out.write('<null />')\n        return\n    if isinstance(obj, dict):\n        out.write('<dict size=\"%d\">\\n' % len(obj))\n        for (k,v) in obj.items():\n            out.write('<key>%s</key>\\n' % k)\n            out.write('<value>')\n            dumpxml(out, v)",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "dumptrailers",
        "kind": 2,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "def dumptrailers(out, doc):\n    for xref in doc.xrefs:\n        out.write('<trailer>\\n')\n        dumpxml(out, xref.trailer)\n        out.write('\\n</trailer>\\n\\n')\n    return\n# dumpallobjs\ndef dumpallobjs(out, doc, mode=None):\n    visited = set()\n    out.write('<pdf>')",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "dumpallobjs",
        "kind": 2,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "def dumpallobjs(out, doc, mode=None):\n    visited = set()\n    out.write('<pdf>')\n    for xref in doc.xrefs:\n        for objid in xref.get_objids():\n            if objid in visited: continue\n            visited.add(objid)\n            try:\n                obj = doc.getobj(objid)\n                if obj is None: continue",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "dumpoutline",
        "kind": 2,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "def dumpoutline(outfp, fname, objids, pagenos, password=b'',\n                dumpall=False, mode=None, extractdir=None):\n    with open(fname, 'rb') as fp:\n        parser = PDFParser(fp)\n        doc = PDFDocument(parser, password)\n        pages = dict( (page.pageid, pageno) for (pageno,page)\n                      in enumerate(PDFPage.create_pages(doc)) )\n        def resolve_dest(dest):\n            if isinstance(dest, str):\n                dest = resolve1(doc.get_dest(dest))",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "extractembedded",
        "kind": 2,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "def extractembedded(outfp, fname, objids, pagenos, password=b'',\n                    dumpall=False, mode=None, extractdir=None):\n    def extract1(obj):\n        filename = os.path.basename(obj['UF'] or obj['F'])\n        fileref = obj['EF']['F']\n        fileobj = doc.getobj(fileref.objid)\n        if not isinstance(fileobj, PDFStream):\n            raise PDFValueError(\n                'unable to process PDF: reference for %r is not a PDFStream' %\n                (filename))",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "dumppdf",
        "kind": 2,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "def dumppdf(outfp, fname, objids, pagenos, password=b'',\n            dumpall=False, mode=None, extractdir=None):\n    with open(fname, 'rb') as fp:\n        parser = PDFParser(fp)\n        doc = PDFDocument(parser, password)\n        if objids:\n            for objid in objids:\n                obj = doc.getobj(objid)\n                dumpxml(outfp, obj, mode=mode)\n        if pagenos:",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "def main(argv):\n    import getopt\n    def usage():\n        print(f'usage: {argv[0]} [-P password] [-a] [-p pageid] [-i objid] [-o output] '\n               '[-r|-b|-t] [-T] [-O output_dir] [-d] input.pdf ...')\n        return 100\n    try:\n        (opts, args) = getopt.getopt(argv[1:], 'dP:ap:i:o:rbtTO:')\n    except getopt.GetoptError:\n        return usage()",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "ESCAPE",
        "kind": 5,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "ESCAPE = set(map(ord, '&<>\"'))\ndef encode(data):\n    buf = StringIO()\n    for b in data:\n        if b < 32 or 127 <= b or b in ESCAPE:\n            buf.write(f'&#{b};')\n        else:\n            buf.write(chr(b))\n    return buf.getvalue()\n# dumpxml",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "LITERAL_FILESPEC",
        "kind": 5,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "LITERAL_FILESPEC = LIT('Filespec')\nLITERAL_EMBEDDEDFILE = LIT('EmbeddedFile')\ndef extractembedded(outfp, fname, objids, pagenos, password=b'',\n                    dumpall=False, mode=None, extractdir=None):\n    def extract1(obj):\n        filename = os.path.basename(obj['UF'] or obj['F'])\n        fileref = obj['EF']['F']\n        fileobj = doc.getobj(fileref.objid)\n        if not isinstance(fileobj, PDFStream):\n            raise PDFValueError(",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "LITERAL_EMBEDDEDFILE",
        "kind": 5,
        "importPath": "venv.bin.dumppdf",
        "description": "venv.bin.dumppdf",
        "peekOfCode": "LITERAL_EMBEDDEDFILE = LIT('EmbeddedFile')\ndef extractembedded(outfp, fname, objids, pagenos, password=b'',\n                    dumpall=False, mode=None, extractdir=None):\n    def extract1(obj):\n        filename = os.path.basename(obj['UF'] or obj['F'])\n        fileref = obj['EF']['F']\n        fileobj = doc.getobj(fileref.objid)\n        if not isinstance(fileobj, PDFStream):\n            raise PDFValueError(\n                'unable to process PDF: reference for %r is not a PDFStream' %",
        "detail": "venv.bin.dumppdf",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.bin.pdf2txt",
        "description": "venv.bin.pdf2txt",
        "peekOfCode": "def main(argv):\n    import getopt\n    def usage():\n        print(f'usage: {argv[0]} [-P password] [-o output] [-t text|html|xml|tag]'\n               ' [-O output_dir] [-c encoding] [-s scale] [-R rotation]'\n               ' [-Y normal|loose|exact] [-p pagenos] [-m maxpages]'\n               ' [-S] [-C] [-n] [-A] [-V] [-M char_margin] [-L line_margin]'\n               ' [-W word_margin] [-F boxes_flow] [-d] input.pdf ...')\n        return 100\n    try:",
        "detail": "venv.bin.pdf2txt",
        "documentation": {}
    }
]